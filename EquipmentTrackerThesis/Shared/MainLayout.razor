@using EquipmentTrackerThesis.Data;
@using EquipmentTrackerThesis.Database;
@inherits LayoutComponentBase

@inject EquipmentTrackerThesis.ILocalStorage LocalStorage
@inject IJSRuntime JSRuntime
@inject DatabaseHandler _dbHandler
@inject SignInCheck signInCheck
@inject NavigationManager navigationmanager

<CascadingValue Value="this">

    <PageTitle>EquipmentTrackerThesis</PageTitle>

    <div class="page">
        <div class="sidebar">
            <NavMenu />
        </div>

        <main>
            <div class="top-row px-4">
                <div style="width:150px;text-align:right;">
                    @if (loggedIn)
                    {
                        <a class="btn btn-sm btn-primary text-white" title="Account" href="account"><span class="oi oi-key"></span></a>
                        <button class="btn btn-sm btn-danger" title="Kilépés" @onclick="Logout"><span class="oi oi-account-logout"></span></button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-success" title="Belépés" @onclick="OpenLogin"><span class="oi oi-account-login"></span></button>
                    }
                </div>
            </div>

            <article class="content px-4">
                @Body
            </article>
        </main>
    </div>

</CascadingValue>

<div class="modal-backdrop fade @(show ? "show" : "") @(display ? "d-block" : "d-none")" style="z-index: -1;"></div>

<div class="modal fade @(show ? "show" : "")  @(display ? "d-block" : "d-none")" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Bejelentkezés</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Bezárás" @onclick="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="loginEmail" class="form-label">E-mail</label>
                    <input type="email" class="form-control" id="loginEmail" placeholder="nev@vallalat.hu" autocomplete="off" required @bind-value="user" />
                </div>
                <div class="mb-3">
                    <label for="loginPassword" class="form-label">Jelszó</label>
                    <input type="password" class="form-control" id="loginPassword" required @bind-value="password" />
                </div>
                @if (errorMessage == "A felhasználónév és/vagy a jelszó helytelen!")
                {
                    <span class="alert alert-danger" role="alert">@errorMessage</span>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" @onclick="Login">Belépés</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Mégse</button>
            </div>
        </div>
    </div>
</div>

@code {

    private bool show, display, loggedIn;
    private string? user, password;
    private string? errorMessage;

    public string? GetUserName()
    {
        return loggedIn ? user : null;
    }

    public async Task OpenLogin()
    {
        user = await LocalStorage.GetStringAsync("user", JSRuntime);

        display = true;
        await Task.Delay(100);
        show = true;
    }

    public async Task Logout()
    {
        user = null;
        loggedIn = false;
        await LocalStorage.RemoveAsync("user", JSRuntime);
        signInCheck.CurrentEmployee = new EmployeeModel
            {
                Username = ""
            };
        navigationmanager.NavigateTo("/");
    }

    private async Task Close()
    {
        show = false;
        display = false;
        errorMessage = null;
        await Task.Delay(500);
        StateHasChanged();
    }

    private void Login()
    {
        if (!string.IsNullOrEmpty(user))
        {
            SignIn();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!loggedIn)
            {
                await LocalStorage.RemoveAsync("user", JSRuntime);
            }
            StateHasChanged();
        }
    }
    private async void SignIn()
    {
        if (!string.IsNullOrEmpty(user) && !string.IsNullOrEmpty(password))
        {
        bool isAuthenticated = signInCheck.SignInAttempt(user, password);
            if (isAuthenticated)
            {
                var logins = _dbHandler.GetAllLogins();
                var currentLogin = logins.First(x => x.Username == user);
                currentLogin.LastLogin = DateTime.Now;
                _dbHandler.UpdateLogin(currentLogin);

                loggedIn = true;
                await LocalStorage.SaveStringAsync("user", user, JSRuntime);
                navigationmanager.NavigateTo("/account");
                await Close();
            }
            else
            {
                errorMessage = "A felhasználónév és/vagy a jelszó helytelen!";
                //user = null;
                password = null;
                StateHasChanged();
            }
        }
        else
        {
            errorMessage = "A felhasználónév és/vagy a jelszó helytelen!";
            StateHasChanged();
        }
    }
}