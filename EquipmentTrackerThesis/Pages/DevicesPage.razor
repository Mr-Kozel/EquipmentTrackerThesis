@page "/devices"

@using EquipmentTrackerThesis.Data
@using EquipmentTrackerThesis.Database;
@using EquipmentTrackerThesis.Database.Models;
@using EquipmentTrackerThesis.Pages.Components;
@inject DatabaseHandler _databaseHandler;
@inject DatabaseContext _dbcontext;
@inject SignInCheck signInCheck
@inject NavigationManager navigationmanager

<PageTitle>Céges eszközök</PageTitle>

<div class="search-container">
    <input type="text" value="@searchTerm" @oninput="HandleInput" placeholder="Keresés...">
    <button class="btn btn-primary" @onclick="FilterDevices">Keresés</button>
    @if (signInCheck.GetRole() == "Admin")
    {
        <button class="btn btn-primary" @onclick="AddNewDevice">Új eszköz hozzáadása</button>
        @if (existSelectedDivice)
        {
            <button class="btn btn-primary" @onclick="ModifyDevice">Eszköz módosítása/archiválása</button>
        }
        else
        {
            <button class="btn btn-primary disabled">Eszköz módosítása/archiválása</button>
        }
    }

</div>

<ModalDialogWindowToAdd @ref="modalDialogWindowToAdd"></ModalDialogWindowToAdd>
<ModalDialogWindowToModifyRemove @ref="modalDialogWindowToModifyRemove"></ModalDialogWindowToModifyRemove>

@if (devices == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Név</th>
                <th>Gyártási szám</th>
                <th>Típus</th>
                <th>Vásárlás dátuma</th>
                <th>Tulajdonos</th>
                <th>Átvétel dátuma</th>
                <th>Leadás dátuma</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var dev in filteredDevices)
            {
                if (dev.Archived == true)
                {
                    continue;
                }
                else
                {
                    <tr @onclick="() => SelectDevice(dev)"
                    @onmouseover="() => HoverRow(true, dev)"
                    @onmouseout="() => HoverRow(false)"
                        class="selectable-row @((selectedDevice != null && selectedDevice.Assignment == dev.Assignment) ? "selected-row" : "") @((hoveredDevice != null && hoveredDevice.Assignment == dev.Assignment) ? "hover-row" : "")">
                        <td>@dev.Name</td>
                        <td>@dev.SerialNumber</td>
                        <td>@dev.Type</td>
                        <td>@dev.PurchaseDate.Date.ToString("yyyy.MM.dd.")</td>
                        <td>@employee[dev.Owner].SurName @employee[dev.Owner].FirstName</td>
                        <td>@dev.ReceptionDate.Date.ToString("yyyy.MM.dd.")</td>
                        @if (dev.ReceptionDate == dev.ReturnDate)
                        {
                            <td>-</td>
                        }
                        else
                        {
                            <td>@dev.ReturnDate.Date.ToString("yyyy.MM.dd.")</td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    List<Devices> devices = new List<Devices>();
    List<Employee> employee = new List<Employee>();
    List<Devices> filteredDevices = new List<Devices>();

    private ModalDialogWindowToAdd? modalDialogWindowToAdd { get; set; }
    private ModalDialogWindowToModifyRemove? modalDialogWindowToModifyRemove { get; set; }
    private Devices selectedDevice = new Devices();
    private Devices? hoveredDevice;

    string searchTerm = "";
    bool existSelectedDivice = false;

    protected override void OnInitialized()
    {
        if (signInCheck.CurrentEmployee == null || string.IsNullOrEmpty(signInCheck.CurrentEmployee.Username))
        {
            navigationmanager.NavigateTo("/");
            return;
        }
        devices = _databaseHandler.GetAllDevices();
        employee = _databaseHandler.GetAllEmployees();
        filteredDevices = devices;
    }

    protected void HandleInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
    }

    void FilterDevices()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredDevices = devices;
        }
        else
        {
            filteredDevices = devices.Where(dev =>
    (dev.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
    (dev.SerialNumber?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
    (dev.Type?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
    (employee.ElementAtOrDefault(dev.Owner)?.SurName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
    (employee.ElementAtOrDefault(dev.Owner)?.FirstName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
    ).ToList();
        }
    }

    public void AddNewDevice()
    {
        if (modalDialogWindowToAdd != null)
        {
            modalDialogWindowToAdd.Open();
        }
    }

    public void ModifyDevice()
    {
        if (selectedDevice != null && modalDialogWindowToModifyRemove != null)
        {
            modalDialogWindowToModifyRemove.Open(selectedDevice);
        }
    }

    void SelectDevice(Devices device)
    {
        selectedDevice = device;
        hoveredDevice = null;
        existSelectedDivice = true;
    }

    void HoverRow(bool isHovered, Devices? device = null)
    {
        if (isHovered)
        {
            hoveredDevice = device;
        }
        else
        {
            hoveredDevice = null;
        }
    }
}
