@page "/removeEmployee"

@using EquipmentTrackerThesis.Data;
@using EquipmentTrackerThesis.Database;
@using EquipmentTrackerThesis.Database.Models;
@using Microsoft.AspNetCore.Components;
@using EquipmentTrackerThesis.Pages.Components;
@inject DatabaseHandler _databaseHandler;
@inject DatabaseContext _dbcontext;
@inject SignInCheck signInCheck
@inject NavigationManager navigationmanager

<style>
    body {
        background-color: #ff837d;
        margin: 0;
        padding: 0;
        height: 100vh;
    }
</style>

<h3>Munkavállaló kiléptetése</h3>
<div class="AddEmployee" role="document">
    <div class="">
        <div class="page-body">
            <div class="d-flex flex-column">
                <div class="form-group">
                    <label for="email">E-mail:</label>
                    <select class="form-control" id="email" name="email" @onchange="UpdateSelectedEmployee">
                        @foreach (var employee in employees)
                        {
                            <option value="@employee.Id">@employee.Email</option>
                        }
                    </select>
                </div>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(Message))
        {
            <div class="alert alert-success" role="alert">
                @Message
            </div>
        }
        @if (SelectedEmployee != null)
        {
            <div>
                <br />
                <p>Vezetéknév: @SelectedEmployee.SurName</p>
                <p>Keresztnév: @SelectedEmployee.FirstName</p>
                <button class="btn btn-danger" @onclick="() => TryRemoveEmployee()">Kiléptetés</button>
            </div>
        }
    </div>
</div>

<ModalConfirmWindow @ref="modalConfirmWindow" OnAccepted="@(async () => RemoveEmployee(SelectedEmployee.Id))"></ModalConfirmWindow>


@code {
    [Parameter]
    public string? SurName { get; set; }
    [Parameter]
    public string? FirstName { get; set; }
    [Parameter]
    public string? Email { get; set; }

    [Inject] private NavigationManager? NavigationManager { get; set; }
    private ModalConfirmWindow? modalConfirmWindow { get; set; }


    List<Employee> employees = new List<Employee>();

    public string? UserName { get; set; }
    private string? Message { get; set; }
    private string? SelectedEmail;
    private Employee? SelectedEmployee;

    protected override void OnInitialized()
    {
        if (signInCheck.CurrentEmployee == null || string.IsNullOrEmpty(signInCheck.CurrentEmployee.Username))
        {
            navigationmanager.NavigateTo("/");
            return;
        }
        base.OnInitialized();

        employees = _databaseHandler.GetAllEmployees();
    }

    private void UpdateSelectedEmployee(ChangeEventArgs e)
    {
        SelectedEmail = e.Value?.ToString();
        if (!string.IsNullOrEmpty(SelectedEmail))
        {
            SelectedEmployee = employees.FirstOrDefault(emp => emp.Id == int.Parse(SelectedEmail));
        }
    }

    public void RemoveEmployee(int selectedEmployeeId)
    {
        try
        {
            _databaseHandler.DeleteEmployee(employees[selectedEmployeeId + 2]);
            Message = "A munkavállaló kiléptetése sikeres.";
        }
        catch (Exception ex)
        {
            Message = $"Hiba a kiléptetésnél: {ex.Message}";
        }

        Task.Delay(3000).ContinueWith(t =>
        {
            Message = string.Empty;
            if (NavigationManager != null)
            {
                NavigationManager.NavigateTo("/");
            }
        });
    }

    private void TryRemoveEmployee()
    {
        if(SelectedEmployee != null && modalConfirmWindow != null)
        {
        modalConfirmWindow.Title = $"Dolgozó kiléptetése: {SelectedEmployee.SurName} {SelectedEmployee.FirstName}";
        modalConfirmWindow.Body = "Biztos, hogy ki akarod léptetni?";
        modalConfirmWindow.AcceptMessage = "Igen";
        modalConfirmWindow.Open();
        }
    }
}

