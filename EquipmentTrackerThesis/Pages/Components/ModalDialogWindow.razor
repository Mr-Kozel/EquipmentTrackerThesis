@using EquipmentTrackerThesis.Data;
@using EquipmentTrackerThesis.Database;
@using EquipmentTrackerThesis.Database.Models;
@inject DatabaseHandler _databaseHandler;

<div class="modal @(ModalClass)" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content" style="background-color: #9effa9;">
            <div class="d-flex justify-content-center align-items-center @(ModalTypeToClass())">
                <span class="oi oi-@(IconFromModalType())" style="margin-right:10px" aria-hidden="true"> Szerkesztés</span>
                <h6 class="modal-title">@Title</h6>
            </div>
            <div class="modal-body">
                <div class="d-flex flex-column">
                    <div class="form-group">
                        <label for="fname">Vezetéknév:</label>
                        <input type="text" class="form-control" id="fname" name="fname" value="@FirstName">
                    </div>
                    <div class="form-group">
                        <label for="sname">Keresztnév:</label>
                        <input type="text" class="form-control" id="sname" name="sname" value="@SurName">
                    </div>
                    <div class="form-group">
                        <label for="email">E-mail:</label>
                        <input type="email" class="form-control" id="email" name="email" value="@Email">
                    </div>
                    <div class="form-group">
                        <label for="jtitle">Beosztás:</label>
                        <select class="form-control" id="jtitle" name="jtitle" @bind="@SelectedJobTitleId">
                            @foreach (var title in jobTitle)
                            {
                                <option value="@title.JobTitleId">@title.Description</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="phone">Mobil:</label>
                        <input type="tel" class="form-control" id="phone" name="phone" value="@Phone">
                    </div>
                    <div class="form-group">
                        <label for="supervisor">Felettes:</label>
                        <select class="form-control" id="supervisor" name="supervisor" @bind="@SelectedSupervisorId">
                            @foreach (var emp in employees)
                            {
                                if (emp.IsActive)
                                {
                                    <option value="@emp.Id">@emp.SurName @emp.FirstName</option>
                                }
                                else
                                {
                                    continue;
                                }
                            }
                        </select>
                    </div>
                    <br />
                    <div class="form-group">
                        <label>Nem:</label>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" id="male" name="gender" value="true" checked="@Gender" @onchange="e => Gender = true">
                            <label class="form-check-label" for="male">Férfi</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" id="female" name="gender" value="false" checked="@(!Gender)" @onchange="e => Gender = false">
                            <label class="form-check-label" for="female">Nő</label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer d-inline-block">
                <button type="button" class="btn spa-btn-secondary" data-dismiss="modal" @onclick="() => Update()">Módosítás</button>
                <button type="button" class="btn spa-btn-secondary" data-dismiss="modal" @onclick="() => Close()">Mégse</button>
            </div>
            @if (message == "Hiba: A dolgozó adataiban nem történt változás!")
            {
                <span class="alert alert-danger" role="alert">@message</span>
            }
        </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public string? Title { get; set; } = "";
    [Parameter]
    public string? SurName { get; set; } = "";
    [Parameter]
    public string? FirstName { get; set; } = "";
    [Parameter]
    public string? Email { get; set; } = "";
    [Parameter]
    public int JobTitle { get; set; } = 0;
    [Parameter]
    public string? Phone { get; set; } = "";
    [Parameter]
    public int Supervisor { get; set; } = 0;
    [Parameter]
    public bool Gender { get; set; } = false;
    [Parameter]
    public Employee? Employee { get; set; }
    private ModalWindowType _type;
    [Parameter]
    public ModalWindowType Type
    {
        get
        {
            return _type;
        }
        set

        {
            _type = value;
        }
    }

    List<Employee> employees = new List<Employee>();
    List<JobTitle> jobTitle = new List<JobTitle>();

    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public string message = "";
    private string? originalSurName;
    private string? originalFirstName;
    private string? originalEmail;
    private string? originalPhone;
    public bool ShowBackdrop = false;
    private bool originalGender;
    private int SelectedSupervisorId;
    public int SelectedJobTitleId;

    public void Open(Employee employee)
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        message = "";
        Type = ModalWindowType.Modify;
        StateHasChanged();

        SurName = employee.SurName;
        FirstName = employee.FirstName;
        Email = employee.Email;
        Phone = employee.Phone;
        Gender = employee.Gender;
        Supervisor = employee.Supervisor;

        employees = _databaseHandler.GetAllEmployees();
        jobTitle = _databaseHandler.GetAllJobTitles();

        originalSurName = SurName;
        originalFirstName = FirstName;
        originalEmail = Email;
        originalPhone = Phone;
        originalGender = Gender;
        SelectedSupervisorId = Supervisor;
        SelectedJobTitleId = employee.JobTitle;

        Employee = employee;
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        message = "";
        StateHasChanged();
    }

    public void Update()
    {
        bool isModified = SurName != originalSurName ||
                         FirstName != originalFirstName ||
                         Email != originalEmail ||
                         SelectedJobTitleId != JobTitle ||
                         Phone != originalPhone ||
                         SelectedSupervisorId != Supervisor ||
                         Gender != originalGender;

        if (isModified && Employee != null)
        {
            Employee.SurName = SurName;
            Employee.FirstName = FirstName;
            Employee.Email = Email;
            Employee.Phone = Phone;
            Employee.Gender = Gender;
            Employee.Supervisor = SelectedSupervisorId;
            Employee.JobTitle = SelectedJobTitleId;

            _databaseHandler.UpdateEmployee(Employee);
            Close();
        }
        else
        {
            message = "Hiba: A dolgozó adataiban nem történt változás!";
        }
    }

    public void HandleJobTitleChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int selectedJobTitleId))
        {
            SelectedJobTitleId = selectedJobTitleId;
        }
    }

    private string ModalTypeToClass()
    {
        switch (Type)
        {
            case ModalWindowType.Modify:
                return "msg-loop-circular";
            case ModalWindowType.Warning:
                return "msg-warning";
            case ModalWindowType.Error:
                return "msg-error";
            default:
                return "msg-info";
        }
    }

    private string IconFromModalType()
    {
        //Open Iconic: https://icon-sets.iconify.design/oi/
        switch (Type)
        {
            case ModalWindowType.Modify:
                return "loop-circular";
            case ModalWindowType.Warning:
                return "warning";
            case ModalWindowType.Error:
                return "circle-x";
            default:
                return "info";
        }
    }
}