@page "/addEmployee"

@using EquipmentTrackerThesis.Data;
@using EquipmentTrackerThesis.Database;
@using EquipmentTrackerThesis.Database.Models;
@using Microsoft.AspNetCore.Components
@inject DatabaseHandler _databaseHandler;
@inject DatabaseContext _dbcontext;
@inject SignInCheck signInCheck
@inject NavigationManager navigationmanager

<style>
    body {
        background-color: #9effa9;
        margin: 0;
        padding: 0;
        height: 100vh;
    }
</style>

<h3>Új munkavállaló hozzáadása</h3>
<div class="page">
    <div class="AddEmployee" role="document">
        <div class="">
            <div class="page-body">
                <div class="d-flex flex-column">
                    <div class="form-group">
                        <label for="fname">Vezetéknév:</label>
                        <input type="text" class="form-control" id="fname" name="fname" @bind="FirstName">
                    </div>
                    @if (Message == "A vezetéknév mező kitöltése kötelező!")
                    {
                        <div class="alert alert-danger" role="alert">
                            @Message
                        </div>
                    }
                    <div class="form-group">
                        <label for="sname">Keresztnév:</label>
                        <input type="text" class="form-control" id="sname" name="sname" @bind="SurName">
                    </div>
                    @if (Message == "A keresztnév mező kitöltése kötelező!")
                    {
                        <div class="alert alert-danger" role="alert">
                            @Message
                        </div>
                    }
                    <div class="form-group">
                        <label for="email">E-mail:</label>
                        <input type="email" class="form-control" id="email" name="email" @bind="Email">
                    </div>
                    @if (Message == "Az e-mail mező kitöltése kötelező!" || Message == "Az e-mail cím formátuma nem megfelelő, '@vallalat.hu'-ra kell végződnie!")
                    {
                        <div class="alert alert-danger" role="alert">
                            @Message
                        </div>
                    }
                    <div class="form-group">
                        <label for="jtitle">Beosztás:</label>
                        <select class="form-control" id="jtitle" name="jtitle" @bind="@SelectedJobTitleId">
                            @foreach (var title in jobTitle)
                            {
                                <option value="@title.JobTitleId">@title.Description</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="phone">Mobil:</label>
                        <input type="tel" class="form-control" id="phone" name="phone" @bind="Phone">
                    </div>
                    @if (Message == "A mobil mező kitöltése kötelező!")
                    {
                        <div class="alert alert-danger" role="alert">
                            @Message
                        </div>
                    }
                    <div class="form-group">
                        <label for="supervisor">Felettes:</label>
                        <select class="form-control" id="supervisor" name="supervisor" @bind="@SelectedSupervisorId">
                            @foreach (var emp in employees)
                            {
                                if(emp.IsActive)
                                {
                                    <option value="@emp.Id">@emp.SurName @emp.FirstName</option>
                                }
                                else
                                {
                                    continue;
                                }
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Nem:</label>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" id="male" name="gender" value="true" checked="@Gender" @onchange="e => Gender = true">
                            <label class="form-check-label" for="male">Férfi</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" id="female" name="gender" value="false" checked="@(!Gender)" @onchange="e => Gender = false">
                            <label class="form-check-label" for="female">Nő</label>
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <div class="form-group">
                <label for="password">Jelszó:</label>
                <input type="password" class="form-control" id="password" name="password" @bind="Password">
            </div>
            <div class="form-group">
                <label for="passwordCheck">Jelszó megerőssítése:</label>
                <input type="password" class="form-control" id="passwordCheck" name="passwordCheck" @bind="PasswordCheck">
            </div>
            @if (Message == "A jelszónak tartalmaznia kell kis- és nagybetűt, számot és speciális karaktert is. A jelszónak minimum 8, maximum 15 karakter hosszúnak kell lennie!")
            {
                <div class="alert alert-danger" role="alert">
                    @Message
                </div>
            }
            @if (Message == "A jelszavak nem egyeznek meg." || Message == "Minden mezőt ki kell tölteni!")
            {
                <div class="alert alert-danger" role="alert">
                    @Message
                </div>
            }
            @if (Message == "Az új munkavállaló hozzáadása sikeres.")
            {
                <div class="alert alert-success" role="alert">
                    @Message
                </div>
            }
            <div class="modal-footer d-inline-block">
                <button type="button" class="btn btn-success" data-dismiss="modal" @onclick="() => AddNewEmployee()">Hozzáadás</button>
            </div>
        </div>
    </div>
</div>


@code {

    [Parameter]
    public string? SurName { get; set; }
    [Parameter]
    public string? FirstName { get; set; }
    [Parameter]
    public string? Email { get; set; }
    [Parameter]
    public int JobTitle { get; set; }
    [Parameter]
    public string? Phone { get; set; }
    [Parameter]
    public int Supervisor { get; set; }
    [Parameter]
    public bool Gender { get; set; }
    [Parameter]
    public string? Password { get; set; }
    [Parameter]
    public string? PasswordCheck { get; set; }

    [Inject] private NavigationManager? NavigationManager { get; set; }

    List<Employee> employees = new List<Employee>();
    List<JobTitle> jobTitle = new List<JobTitle>();

    private string? Message { get; set; }
    public string? UserName { get; set; }

    private int SelectedSupervisorId;
    public int SelectedJobTitleId;
    int minUpper = 3;
    int minLower = 3;
    int minLength = 8;
    int maxLength = 12;
    string allowedSpecials = "! \" # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \\ ] ^ _` { | } ~";
    int upper = 0;
    int lower = 0;
    int character = 0;
    int number = 0;

    protected override void OnInitialized()
    {
        //If there is no signed in user, the page reloads the Account page, where users can log in.
        if (signInCheck.CurrentEmployee == null || string.IsNullOrEmpty(signInCheck.CurrentEmployee.Username) || signInCheck.GetRole() == "Employee")
        {
            navigationmanager.NavigateTo("/");
            return;
        }

        base.OnInitialized();

        //Fills the necessary variabes with the user's data.
        employees = _databaseHandler.GetAllEmployees();
        jobTitle = _databaseHandler.GetAllJobTitles();
    }

    public void AddNewEmployee()
    {
        try
        {
            //First checks if all fields are filled with the required data.
            if (string.IsNullOrEmpty(FirstName))
            {
                Message = "A vezetéknév mező kitöltése kötelező!";
                return;
            }
            if (string.IsNullOrEmpty(SurName))
            {
                Message = "A keresztnév mező kitöltése kötelező!";
                return;
            }
            if (string.IsNullOrEmpty(Email))
            {
                Message = "Az e-mail mező kitöltése kötelező!";
                return;
            }
            if (!Email.EndsWith("@vallalat.hu", StringComparison.OrdinalIgnoreCase))
            {
                Message = "Az e-mail cím formátuma nem megfelelő, '@vallalat.hu'-ra kell végződnie!";
                return;
            }
            if (string.IsNullOrEmpty(Phone))
            {
                Message = "A mobil mező kitöltése kötelező!";
                return;
            }
            if (Password != PasswordCheck)
            {
                Message = "A jelszavak nem egyeznek meg.";
                return;
            }
            if (string.IsNullOrEmpty(SurName) || string.IsNullOrEmpty(FirstName) || string.IsNullOrEmpty(Email) || string.IsNullOrEmpty(Phone) || SelectedJobTitleId == 0 || SelectedSupervisorId == 0)
            {
                Message = "Minden mezőt ki kell tölteni!";
                return;
            }
            if (string.IsNullOrEmpty(Password))
            {
                Message = "Jelszó nem lehet üres!";
                return;
            }

            char[] characters = Password.ToCharArray();

            //Checks if the given password meets the requirements.
            foreach (char enteredCharacters in characters)
            {
                if (char.IsUpper(enteredCharacters))
                {
                    upper = upper + 1;
                }
                else if (char.IsLower(enteredCharacters))
                {
                    lower = lower + 1;
                }
                else if (char.IsNumber(enteredCharacters))
                {
                    number = number + 1;
                }
                else if (allowedSpecials.Contains(enteredCharacters.ToString()))
                {
                    character = character + 1;
                }
            }
            if (upper < minUpper || lower < minLower || Password.Length < minLength || Password.Length > maxLength)
            {
                Message = "Ajelszónk tartalmaznia kell kis- és nagybetűt, számot és speciális karaktert is. A jelszónak minimum 8, maximum 15 karakter hosszúnak kell lennie!";
                return;
            }

            //Creates an Employee and Login variable, fills them with the given data and saves them to the database.
            Employee Employee = new Employee();
            Employee.SurName = SurName;
            Employee.FirstName = FirstName;
            Employee.Email = Email;
            Employee.Phone = Phone;
            Employee.Gender = Gender;
            Employee.Supervisor = SelectedSupervisorId;
            Employee.JobTitle = SelectedJobTitleId;

            Login Login = new Login();
            Login.Username = Email;
            Login.Password = _dbcontext.HashPassword(Password);
            Login.LastLogin = new DateTime(2022, 1, 1);

            _databaseHandler.AddNewEmployee(Employee);
            _databaseHandler.AddNewLogin(Login);

            Message = "Az új munkavállaló hozzáadása sikeres.";
        }
        catch (Exception ex)
        {
            Message = $"Hiba a hozzáadásnál: {ex.Message}";
        }

        Password = string.Empty;
        PasswordCheck = string.Empty;

        //Ater saving process, the program navigates back to Account page.
        Task.Delay(3000).ContinueWith(t =>
        {
            Message = string.Empty;
            if (NavigationManager != null)
            {
                NavigationManager.NavigateTo("/");
            }
        });
    }
}
