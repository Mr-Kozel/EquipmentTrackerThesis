@page "/addEmployee"

@using EquipmentTrackerThesis.Data;
@using EquipmentTrackerThesis.Database;
@using EquipmentTrackerThesis.Database.Models;
@using Microsoft.AspNetCore.Components
@inject DatabaseHandler _databaseHandler;

<h3>Új munkavállaló hozzáadása</h3>
<div class="AddEmployee" role="document">
    <div class="" style="background-color: #9effa9;">
        <div class="page-body">
            <div class="d-flex flex-column">
                <div class="form-group">
                    <label for="fname">Vezetéknév:</label>
                    <input type="text" class="form-control" id="fname" name="fname" @bind="FirstName">
                </div>
                <div class="form-group">
                    <label for="sname">Keresztnév:</label>
                    <input type="text" class="form-control" id="sname" name="sname" @bind="SurName">
                </div>
                <div class="form-group">
                    <label for="email">E-mail:</label>
                    <input type="email" class="form-control" id="email" name="email" @bind="Email">
                </div>
                <div class="form-group">
                    <label for="jtitle">Beosztás:</label>
                    <select class="form-control" id="jtitle" name="jtitle" @bind="@SelectedJobTitleId">
                        @foreach (var title in jobTitle)
                        {
                            <option value="@title.JobTitleId">@title.Description</option>
                        }
                    </select>
                </div>
                <div class="form-group">
                    <label for="phone">Mobil:</label>
                    <input type="tel" class="form-control" id="phone" name="phone" @bind="Phone">
                </div>
                <div class="form-group">
                    <label for="supervisor">Felettes:</label>
                    <select class="form-control" id="supervisor" name="supervisor" @bind="@SelectedSupervisorId">
                        @foreach (var emp in employees)
                        {
                            <option value="@emp.Id">@emp.SurName @emp.FirstName</option>
                        }
                    </select>
                </div>
                <div class="form-group">
                    <label>Nem:</label>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" id="male" name="gender" value="true" checked="@Gender" @onchange="e => Gender = true">
                        <label class="form-check-label" for="male">Férfi</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" id="female" name="gender" value="false" checked="@(!Gender)" @onchange="e => Gender = false">
                        <label class="form-check-label" for="female">Nő</label>
                    </div>
                </div>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(Message))
        {
            <div class="alert alert-success" role="alert">
                @Message
            </div>
        }
        <div class="modal-footer d-inline-block">
            <button type="button" class="btn spa-btn-secondary" data-dismiss="modal" @onclick="() => AddNewEmployee()">Hozzáadás</button>
        </div>
    </div>
</div>




@code {

    [Parameter]
    public string SurName { get; set; }
    [Parameter]
    public string FirstName { get; set; }
    [Parameter]
    public string Email { get; set; }
    [Parameter]
    public int JobTitle { get; set; }
    [Parameter]
    public string Phone { get; set; }
    [Parameter]
    public int Supervisor { get; set; }
    [Parameter]
    public bool Gender { get; set; }

    private string Message { get; set; }
    public string UserName { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }

    List<Employee> employees = new List<Employee>();
    List<JobTitle> jobTitle = new List<JobTitle>();

    private int SelectedSupervisorId;
    public int SelectedJobTitleId;


    protected override void OnInitialized()
    {
        base.OnInitialized();

        employees = _databaseHandler.GetAllEmployees();
        jobTitle = _databaseHandler.GetAllJobTitles();

    }

    public void AddNewEmployee()
    {
        try
        {

            Employee Employee = new Employee();

            Employee.SurName = SurName;
            Employee.FirstName = FirstName;
            Employee.Email = Email;
            Employee.Phone = Phone;
            Employee.Gender = Gender;
            Employee.Supervisor = SelectedSupervisorId;
            Employee.JobTitle = SelectedJobTitleId;

            _databaseHandler.AddNewEmployee(Employee);
            Message = "Az új munkavállaló hozzáadása sikeres.";
        }
        catch (Exception ex)
        {
            Message = $"Hiba a hozzáadásnál: {ex.Message}";
        }

        Task.Delay(3000).ContinueWith(t =>
        {
            Message = string.Empty;
            NavigationManager.NavigateTo("/");
        });


    }


}
