@page "/account"

@using EquipmentTrackerThesis.Data;
@using EquipmentTrackerThesis.Database;
@using EquipmentTrackerThesis.Database.Models;
@using EquipmentTrackerThesis.Pages.Components;
@inject DatabaseHandler _databaseHandler;
@inject DatabaseContext _dbcontext;
@inject SignInCheck signInCheck
@inject NavigationManager navigationmanager

<PageTitle>Személyes adatok</PageTitle>

<h1>Szia @(firstName)!</h1>

<div class="d-flex flex-row justify-content-around">
    <div class="d-flex flex-culomn">
        <img src=@(location) style="width: 120px" />
        <br />
        Név: @(name)
        <br />
        Beosztás: @(position)
        <br />
        E-mail cím: @(email)
        <br />
        Telefon: @(phone)
    </div>
    <div class="d-flex flex-culomn">
        Felettes: @(boss)
        <br />
        Munkaköri leírás
        <br />
        @(description)
    </div>
</div>
@if (signInCheck.GetRole() == "Admin")
{
    <div>
        <button class="btn btn-primary" style="white-space:nowrap" @onclick="@(()=>Modify(employee))">Szerkesztés</button>
    </div>
}
<ModalDialogWindow @ref="modalDialogWindow"></ModalDialogWindow>

@code {
    private ModalDialogWindow? modalDialogWindow { get; set; }

    List<Employee> employees = new List<Employee>();
    List<JobTitle> jobTitle = new List<JobTitle>();
    Employee employee = new Employee();

    string? location, firstName, surName, name, position, email, phone, boss, boss1, boss2, description;
    private string selectedEmail = "";
    bool gender;
    int z; // the signed in user
    int supervisor, pos;

    protected override void OnInitialized()
    {
        //If there is no signed in user, the page reloads the Account page, where users can log in.
        if (signInCheck.CurrentEmployee == null || string.IsNullOrEmpty(signInCheck.CurrentEmployee.Username))
        {
            navigationmanager.NavigateTo("/");
            return;
        }

        base.OnInitialized();

        //Searches the logged in user's data.
        selectedEmail = signInCheck.CurrentEmployee?.Employee?.Email ?? "";
        employees = _databaseHandler.GetAllEmployees();
        jobTitle = _databaseHandler.GetAllJobTitles();

        var employeeEmails = employees.Select(x => x.Email).ToList();

        if (string.IsNullOrEmpty(signInCheck.CurrentEmployee?.Employee?.Email) == false)
        {
            var foundEmployee = employees.FirstOrDefault(x => x.Email == selectedEmail);
            if (foundEmployee != null)
            {
                z = foundEmployee.Id;
            };
        }

        var x = employees[z];
        employee = x;

        //loads in a male/female picture
        //Develope: let users upload profile pcturesand store them
        if (x.Gender)
        {
            location = "/css/male.png";
        }
        else
        {
            location = "/css/female.png";
        }

        name = x.SurName + " " + x.FirstName;
        position = jobTitle[x.JobTitle - 5001].Description;
        pos = x.JobTitle - 5001;
        email = x.Email;
        phone = x.Phone;
        boss1 = employees[x.Supervisor].SurName;
        boss2 = employees[x.Supervisor].FirstName;
        description = jobTitle[x.JobTitle - 5001].Responsibilities;
        firstName = x.FirstName;
        surName = x.SurName;
        gender = x.Gender;
        boss = boss1 + " " + boss2;
        if (boss == name)
        {
            boss = " - ";
        }
        supervisor = x.Supervisor;
    }

    /// <summary>
    /// This method opens a dialog window filled with user data, where the data can be modified.
    /// </summary>
    /// <param name="employee"></param>
    private void Modify(Employee employee)
    {
        if (modalDialogWindow != null)
        {
            modalDialogWindow.Open(employee);
        }
    }

    //TODO: 
}